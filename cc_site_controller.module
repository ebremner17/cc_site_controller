<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\State\StateInterface;
use Drupal\message\Entity\Message;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_preprocess_html().
 *
 * Add styling class for type of website.
 */
function cc_site_controller_preprocess_html(&$variables) {

  $config = \Drupal::config('cc_site_controller.sitesettings');

  $variables['attributes']['class'][] = 'cadets-canada';
  $variables['attributes']['class'][] = $config->get('cadet_theme') !==  NULL ? $config->get('cadet_theme') : 'generic';

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add states, validation and submit to user registration form.
 */
function cc_site_controller_form_user_register_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

  // Add the visible states for the cell phone carrier.
  $form['field_cc_user_carrier']['#states'] = [
    'visible' => [
      [
        [':input[name="field_cc_user_method"]' => ['value' => 'text']],
      ],
    ],
  ];

  // Add the visible states for the cell phone number.
  $form['field_cc_user_cell']['#states'] = [
    'visible' => [
      [
        [':input[name="field_cc_user_method"]' => ['value' => 'text']],
      ],
    ],
  ];

  // Add the visible states for the cadet name.
  $form['field_cc_user_cadet_name']['#states'] = [
    'visible' => [
      [
        [':input[name="field_cc_user_type"]' => ['value' => 'ws_role_parent']],
      ],
    ],
  ];

  // Add form validation.
  $form['#validate'][] = '_cc_site_controller_user_register_validate';

  // Add form submit handler.
  $form['actions']['submit']['#submit'][]  = '_cc_site_controller_user_registration_submit';
}

/**
 * Helper function.
 *
 * Validates submission values in the FORM_ID() form.
 */
function _cc_site_controller_user_register_validate(array &$form, FormStateInterface $form_state) {

  // Get the method of communication from the form.
  $method = $form_state->getValue('field_cc_user_method')[0]['value'];

  // If the menthod is text, check cell phone and carrier.
  if ($method == 'text') {

    // Get the cell from the form.
    $cell = $form_state->getValue('field_cc_user_cell')[0]['value'];

    // If the cell is not entered, show an error message.
    if ($cell == NULL) {

      // Error message for cell not entered.
      $form_state->setErrorByName('field_cc_user_cell', t('You must enter a cell phone number.'));
    }
    else {

      // Check for 10 digit numbers.
      if(!preg_match('/^\d{10}$/', $cell)) {

        // Error message for improper cell format.
        $form_state->setErrorByName('field_cc_user_cell', t('Cell phone number must be 10 digits and must have only digits (i.e. 5556745634).'));
      }
    }

    // Get the cell phone carrier from the form.
    $carrier = $form_state->getValue('field_cc_user_carrier');

    // If there is nothing set for the carrier, show an error.
    if (!isset($carrier[0]['value'])) {

      // Error message for cell phone carrier.
      $form_state->setErrorByName('field_cc_user_carrier', t('You must select a cell phone carrier.'));
    }
    else {

      // Set the carrier.
      $carrier = $carrier[0]['value'];
    }
  }

  // Get the type of account from the form.
  $type = $form_state->getValue('field_cc_user_type');

  // If the type of account is set and is a parent, check the cadet name.
  if (isset($type[0]['value']) && $type[0]['value'] == 'ws_role_parent') {

    // Get the cadet name from the form.
    $cadet_name = $form_state->getValue('field_cc_user_cadet_name');

    // If the cadet name is not entered, show an error message.
    if ($cadet_name[0]['value'] == NULL) {

      // Error message for the cadet name not entered.
      $form_state->setErrorByName('field_cc_user_cadet_name', t('You must enter your cadets name.'));
    }
  }
}

/**
 * Helper function.
 *
 * Handles submission of user registration.
 */
function _cc_site_controller_user_registration_submit(array &$form, FormStateInterface $form_state) {

  // Username of newly created user.
  $params['username'] = $form_state->getValue('name');

  $query = \Drupal::entityQuery('user')->condition('status', 1);

  $group = $query->orConditionGroup()
    ->condition('roles', 'cc_role_site_manager');

  if ($ids = $query->condition($group)->execute()) {
    $users = User::loadMultiple($ids);
    foreach ($users as $user) {
      $site_managers[] = $user->getEmail();
    }
  }
  else {
    $user = User::load(1);
    $site_managers[] = $user->getEmail();
  }

  foreach ($site_managers as $site_manager) {
    // Send the e-mail to the admin only, do not used send_emails function.
    $mail_sent = \Drupal::service('plugin.manager.mail')->mail('cc_site_controller', 'user_created', $site_manager, 'en', $params, NULL, TRUE);
  }
}

/**
 * Implements hook_mail().
 *
 * This function completes the email, allowing for placeholder substitution.
 */
function cc_site_controller_mail($key, &$message, $params = NULL) {

  $config = \Drupal::config('cc_site_controller.sitesettings');

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

  if ($config->get('type_of_cadets') !== NULL) {
    switch($config->get('type_of_cadets')) {
      case 'sea':
        $corps_designator = 'RCSCC';
        break;
      case 'air':
        $corps_designator = 'RCACS';
        break;
      case 'army':
        $corps_designator = 'RCACC';
    }
  }

  if ($config->get('notification_email_address') !== NULL) {
    if ($config->get('notification_name') !== NULL) {
      $message['headers']['Sender'] = $config->get('notification_name') . ' <' . $config->get('notification_email_address') . '>';
      $message['headers']['Return-Path']  = $config->get('notification_email_address');
      $message['headers']['From'] = $config->get('notification_name') . ' <' . $config->get('notification_email_address') . '>';
      $message['from'] = $config->get('notification_name') . ' <' . $config->get('notification_email_address') . '>';
    }
    else {
      $message['headers']['Sender'] = $config->get('notification_email_address');
      $message['headers']['Return-Path'] = $config->get('notification_email_address');
      $message['headers']['From'] = $config->get('notification_email_address');
      $message['from'] = $config->get('notification_email_address');
    }
  }
  else {

    // Load in user 1 and send from that email;
    $user = \Drupal\user\Entity\User::load(1);

    $message['headers']['Sender'] = $user->getEmail();
    $message['headers']['Return-Path'] = $user->getEmail();
    $message['headers']['From'] = $user->getEmail();
    $message['from'] = $user->getEmail();
  }

  if ($config->get('corps_number') !== NULL) {
    if ($config->get('corps_name') !== NULL) {
      if (isset($corps_designator)) {

        $corps_name = $config->get('corps_number') . ' ' . $corps_designator . ' ' . $config->get('corps_name');
      }
      else {
        $corps_name = $config->get('corps_number') . ' ' . $config->get('corps_name');
      }
    }
    else {
      if (isset($corps_designator)) {
        $corps_name = $config->get('corps_number') . ' ' . $corps_designator;
      }
      else {
        $corps_name = $config->get('corps_number');
      }
    }
  }
  else {
    $corps_name = 'Your Cadet unit';
  }

  if (isset($params['header']['bcc'])) {
    $message['headers']['bcc'] = $params['header']['bcc'];
  }

  switch ($key) {

    case 'user_created':
      $body = 'A new user has applied at ' . $corps_name;

      $body .= ': ' . $params['username'];
      $message['body'][] = $body;
      $message['subject'] = 'New user';
      break;

    case 'alert_created':
      $message['body'][] = $params['message'];
      $message['subject'] = $params['type_of_alert'];
      break;

    case 'news_created':
      $message['body'][] = $corps_name . ' has a new news item available at: ' . $params['content_url'];
      $message['subject'] = 'News';
      break;

    case 'announcement_created':

      $message['body'][] = $corps_name . ' has a new announcement: ' . \Drupal\Core\Url::fromRoute('<front>', array(), array("absolute" => TRUE))->toString() . 'announcements';
      $message['subject'] = 'Announcement';
      break;

    case 'ros_created':
      $message['body'][] = $corps_name . ' has new routine orders: ' . \Drupal\Core\Url::fromRoute('<front>', array(), array("absolute" => TRUE))->toString() . 'ros';
      $message['subject'] = 'Routine Orders';
      break;

    case 'training_created':
      $message['body'][] = $corps_name . ' has new training: ' . \Drupal\Core\Url::fromRoute('<front>', array(), array("absolute" => TRUE))->toString() . 'training';
      $message['subject'] = 'Training';
      break;
  }
}

/**
 * Helper function.
 *
 * Sends emails to all the users.
 *
 * @param $key
 * @param $params
 */
function _cc_site_controller_send_emails($key, $params = NULL) {

  // Get the emails from the users.
  $emails = _cc_site_controller_get_emails($params);

  // If there are emails, process them.
  if (isset($emails) and count($emails) > 0) {
    $bcc = '';
    $count = 0;

    foreach ($emails as $email) {
      if ($count == 0) {
        $bcc = $email;
      }
      else {
        $bcc = $bcc . ',' . $email;
      }
      $count++;
    }
    $params['header']['bcc'] = $bcc;

    $config = \Drupal::config('cc_site_controller.sitesettings');

    if ($config->get('notification_email_address') !== NULL) {
      $notify_email = $config->get('notification_email_address');
    }
    else {
      // Load in user 1 and send from that email;
      $user = \Drupal\user\Entity\User::load(1);

      $notify_email = $user->getEmail();
    }

    // Send the e-mail to the asker. Drupal calls hook_mail() via this.
    $mail_sent = \Drupal::service('plugin.manager.mail')->mail('cc_site_controller', $key, $notify_email, 'en', $params, NULL, TRUE);
  }
}

/**
 * Helper function.
 *
 * Returns all the user emails.
 *
 * @return array
 */
function _cc_site_controller_get_emails($params = NULL) {

  if (isset($params) && $params !== NULL) {
    if (isset($params['type'])) {
      switch ($params['type']) {
        case 'training':
          $users = _cc_site_controller_get_users(array('cc_role_senior_cadet', 'cc_role_officer'));
          break;
        default:
          $users = _cc_site_controller_get_users();
          break;
      }
    }
    else {
      $users = _cc_site_controller_get_users();
    }
  }
  else {
    $users = _cc_site_controller_get_users();
  }

  // Variable to keep track of emails.
  $emails = [];

  // Step through each user and set email.
  foreach ($users as $user) {

    // If the user is active, process it.
    if ($user->isActive() && $user->id() !== 1) {

      // Get the method of communication from the user.
      $method = $user->field_cc_user_method->getValue();

      // If the method is set, process it.
      if (isset($method[0]['value'])) {

        // If the method is email, get user email.
        if ($method[0]['value'] == 'email') {

          // Set the email.
          $emails[] = $user->getEmail();
        } // If the method is not email, get the text info.
        else {

          // Get the email to txt address.
          $email_to_txt =  _cc_site_controller_get_carrier($user->field_cc_user_carrier->getValue()[0]['value']);

          // Set the text info which is the cell phone number @ carrier.
          $emails[] = $user->field_cc_user_cell->getValue()[0]['value'] . '@' . $email_to_txt;
        }
      }
    }
  }

  return $emails;
}

/**
 * Helper function.
 *
 * Get users from the system, with or without roles.
 *
 * @param null array $roles
 */
function _cc_site_controller_get_users($roles = NULL) {

  if ($roles !== NULL) {
    $ids = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->condition('roles', $roles, 'IN')
      ->execute();
  }
  else {
    $ids = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->execute();
  }

  $users = User::loadMultiple($ids);

  return $users;
}

/**
 * Implements hook_page_attachments().
 */
function cc_site_controller_page_attachments(array &$attachments) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $attachments['#attached']['library'][] = 'cc_site_controller/extra_admin';
  }

  $attachments['#attached']['library'][] = 'cc_site_controller/cc-toolbar';
}

/**
 * Helper function.
 *
 * Allowed values for cell phone carrier.
 *
 * @param FieldStorageConfig $definition
 * @param ContentEntityInterface|NULL $entity
 * @param $cacheable
 * @return array
 */
function _cc_site_controller_user_carrier_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  // Options for cell phone carrier.
  $options = [
    'Bell' => 'Bell',
    'Bell MTS' => 'Bell MTS',
    'TBayTel' => 'TBayTel',
    'Eastlink' => 'Eastlink',
    'Fido' => 'Fido',
    'Freedom' => 'Freedom',
    'Koodo' => 'Koodo',
    'Rogers' => 'Rogers',
    'Telus' => 'Telus',
    'PC Mobile' => 'PC Mobile',
    'Sasktel' => 'Sasktel',
    'Virgin Mobile' => 'Virgin Mobile',
  ];

  return $options;
}

/**
 * Helper function.
 *
 * Get the cell phone carrier email to text.
 *
 * @param string $carrier
 * @return mixed
 */
function _cc_site_controller_get_carrier(string $carrier) {

  // List of carriers.
  $carriers = [
    'Bell' => 'txt.bell.ca',
    'Bell MTS' => 'text.mtsmobility.com',
    'TBayTel' => 'pcs.rogers.com',
    'Eastlink' => 'txt.eastlink.ca',
    'Fido' => 'fido.ca',
    'Freedom' => 'txt.freedommobile.ca',
    'Koodo' => 'msg.telus.com',
    'Rogers' => 'pcs.rogers.com',
    'Telus' => 'msg.telus.com',
    'PC Mobile' => 'mobiletxt.ca',
    'Sasktel' => 'sms.sasktel.com',
    'Virgin Mobile' => 'vmobile.ca',
  ];

  return $carriers[$carrier];
}

/**
 * Helper function.
 *
 * Update the config in a specific module.
 *
 * @param string $module
 * @param array $files
 */
function _cc_site_controller_update_config(string $module, array $imports) {

  // Step through each of the import files and find storage config.
  foreach ($imports as $key => $import) {

    // If it is a storage config, place in first part of array.
    if (strpos($import, '.storage.') !== FALSE) {

      // Set storage config into first part of array.
      $new_imports[] = $import;

      // Unset from imports array.
      unset($imports[$key]);
    }
  }

  // If we have new imports, meaning we have storage config changes,
  // step through each of the imports and add to the new imports.
  if (isset($new_imports) && count($new_imports) > 0) {

    // Step through each of the import files and add to the new imports.
    foreach ($imports as $import) {

      // Add to the new imports array.
      $new_imports[] = $import;
    }

    // Set the imports array to the new imports.
    $imports = $new_imports;
  }

  // Setup the CMI.
  $config_path = drupal_get_path('module', $module) . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Step through each changed config, and update/install config.
  foreach ($imports as $import) {
    $config_storage->write($import, $source->read($import));
  }
}

